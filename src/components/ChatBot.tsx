import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { ScrollArea } from './ui/scroll-area';
import { Badge } from './ui/badge';
import { X, Send, Bot, User, HelpCircle, Zap, Sparkles } from 'lucide-react';
import { useLanguage } from '../contexts/LanguageContext';

interface Message {
  id: number;
  type: 'user' | 'bot';
  content: string;
  timestamp: Date;
  suggestions?: string[];
}

interface ChatBotProps {
  onClose: () => void;
}

export function ChatBot({ onClose }: ChatBotProps) {
  const { t, language } = useLanguage();

  const quickQuestions = language === 'hi' ? [
    "рдореБрджреНрджрд╛ рдХреИрд╕реЗ рд░рд┐рдкреЛрд░реНрдЯ рдХрд░реЗрдВ?",
    "рд░рд┐рдкреЛрд░реНрдЯ рдХреЗ рдмрд╛рдж рдХреНрдпрд╛ рд╣реЛрддрд╛ рд╣реИ?",
    "рдЕрдкрдиреА рд░рд┐рдкреЛрд░реНрдЯ рдХреИрд╕реЗ рдЯреНрд░реИрдХ рдХрд░реЗрдВ?",
    "рдкреЙрдЗрдВрдЯреНрд╕ рдХреИрд╕реЗ рдХрдорд╛рдПрдВ?",
    "рд╡рд┐рднрд┐рдиреНрди рд╢реНрд░реЗрдгрд┐рдпрд╛рдВ рдХреНрдпрд╛ рд╣реИрдВ?"
  ] : [
    "How to report an issue?",
    "What happens after reporting?",
    "How to track my reports?",
    "How to earn points?",
    "What are the categories?"
  ];

  const botResponses: Record<string, { content: string; suggestions?: string[] }> = language === 'hi' ? {
    "рдореБрджреНрджрд╛ рдХреИрд╕реЗ рд░рд┐рдкреЛрд░реНрдЯ рдХрд░реЗрдВ": {
      content: "рдореБрджреНрджрд╛ рд░рд┐рдкреЛрд░реНрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП: 1) 'рд░рд┐рдкреЛрд░реНрдЯ' рдЯреИрдм рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ, 2) рдмреБрдирд┐рдпрд╛рджреА рдЬрд╛рдирдХрд╛рд░реА рднрд░реЗрдВ, 3) рд╢реНрд░реЗрдгреА рдФрд░ рдкреНрд░рд╛рдердорд┐рдХрддрд╛ рдЪреБрдиреЗрдВ, 4) рд╕реНрдерд╛рди рдФрд░ рддрд╕реНрд╡реАрд░реЗрдВ рдЬреЛрдбрд╝реЗрдВ, 5) рд╕рдореАрдХреНрд╖рд╛ рдХрд░реЗрдВ рдФрд░ рд╕рдмрдорд┐рдЯ рдХрд░реЗрдВред рд╣рд░ рд╡реИрдз рд░рд┐рдкреЛрд░реНрдЯ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ рдкреЙрдЗрдВрдЯреНрд╕ рдорд┐рд▓реЗрдВрдЧреЗ! ЁЯПЖ",
      suggestions: ["рдХреМрди рд╕реА рд╢реНрд░реЗрдгрд┐рдпрд╛рдВ рдЙрдкрд▓рдмреНрдз рд╣реИрдВ?", "рд╕рдореАрдХреНрд╖рд╛ рдореЗрдВ рдХрд┐рддрдирд╛ рд╕рдордп рд▓рдЧрддрд╛ рд╣реИ?", "рдХреНрдпрд╛ рдореИрдВ рд░рд┐рдкреЛрд░реНрдЯ рд╕рдВрдкрд╛рджрд┐рдд рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ?"]
    },
    "рд░рд┐рдкреЛрд░реНрдЯ рдХреЗ рдмрд╛рдж рдХреНрдпрд╛ рд╣реЛрддрд╛ рд╣реИ": {
      content: "рд╕рдмрдорд┐рд╢рди рдХреЗ рдмрд╛рдж: 1) рдЖрдкрдХреА рд░рд┐рдкреЛрд░реНрдЯ рдХреЛ рдПрдХ рдпреВрдиреАрдХ ID рдорд┐рд▓рддреА рд╣реИ, 2) рд╕рд░рдХрд╛рд░реА рдЕрдзрд┐рдХрд╛рд░реА 24-48 рдШрдВрдЯреЛрдВ рдореЗрдВ рдЗрд╕рдХреА рд╕рдореАрдХреНрд╖рд╛ рдХрд░рддреЗ рд╣реИрдВ, 3) рдЗрд╕реЗ рд╕рдВрдмрдВрдзрд┐рдд рд╡рд┐рднрд╛рдЧреЛрдВ рдХреЛ рд╕реМрдВрдкрд╛ рдЬрд╛рддрд╛ рд╣реИ, 4) рдЖрдкрдХреЛ рдкреНрд░рдЧрддрд┐ рдХреА рдЕрдкрдбреЗрдЯ рдорд┐рд▓реЗрдЧреА, 5) рд╕рдорд╛рдзрд╛рди рдкрд░ рдЖрдкрдХреЛ рдкреЙрдЗрдВрдЯреНрд╕ рдорд┐рд▓рддреЗ рд╣реИрдВ! тЬи",
      suggestions: ["рд╕реНрдерд┐рддрд┐ рдХреИрд╕реЗ рдЯреНрд░реИрдХ рдХрд░реЗрдВ?", "рдореЗрд░реА рд░рд┐рдкреЛрд░реНрдЯ рдХреА рд╕рдореАрдХреНрд╖рд╛ рдХреМрди рдХрд░рддрд╛ рд╣реИ?", "рдЕрдЧрд░ рдХреБрдЫ рдирд╣реАрдВ рд╣реЛрддрд╛ рддреЛ?"]
    },
    "рдЕрдкрдиреА рд░рд┐рдкреЛрд░реНрдЯ рдХреИрд╕реЗ рдЯреНрд░реИрдХ рдХрд░реЗрдВ": {
      content: "рдЕрдкрдиреА рд░рд┐рдкреЛрд░реНрдЯ рдЯреНрд░реИрдХ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП: 1) 'рдореЗрд░реА рд░рд┐рдкреЛрд░реНрдЯреНрд╕' рд╕реЗрдХреНрд╢рди рдкрд░ рдЬрд╛рдПрдВ, 2) рд╕рднреА рд╕рдмрдорд┐рдЯ рдХреА рдЧрдИ рд░рд┐рдкреЛрд░реНрдЯреНрд╕ рдХреА рд╕реВрдЪреА рджреЗрдЦреЗрдВ, 3) рдкреНрд░рддреНрдпреЗрдХ рд░рд┐рдкреЛрд░реНрдЯ рдХреА рд╡рд░реНрддрдорд╛рди рд╕реНрдерд┐рддрд┐ (рд░рд┐рд╡реНрдпреВ, рдкреНрд░реЛрдЧреНрд░реЗрд╕, рд░рд┐рдЬреЙрд▓реНрд╡реНрдб) рджреЗрдЦреЗрдВ, 4) рдЕрдкрдбреЗрдЯреНрд╕ рдХреЗ рд▓рд┐рдП рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рди рдЪреЗрдХ рдХрд░реЗрдВ, 5) рд░рд┐рдЬреЙрд▓реНрд╡реНрдб рд░рд┐рдкреЛрд░реНрдЯреНрд╕ рдХреЗ рд▓рд┐рдП рдкреЙрдЗрдВрдЯреНрд╕ рдХреНрд▓реЗрдо рдХрд░реЗрдВ! ЁЯУК",
      suggestions: ["рдХреНрдпрд╛ рдореИрдВ рд░рд┐рдкреЛрд░реНрдЯ рдПрдбрд┐рдЯ рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ?", "рд░рд┐рдкреЛрд░реНрдЯ рдХрд┐рддрдиреЗ рд╕рдордп рдореЗрдВ рд░рд┐рдЬреЙрд▓реНрд╡ рд╣реЛрддреА рд╣реИ?", "рдЕрдЧрд░ рд░рд┐рдкреЛрд░реНрдЯ рд░рд┐рдЬреЗрдХреНрдЯ рд╣реЛ рдЬрд╛рдП рддреЛ?"]
    },
    "рдкреЙрдЗрдВрдЯреНрд╕ рдХреИрд╕реЗ рдХрдорд╛рдПрдВ": {
      content: "рдкреЙрдЗрдВрдЯреНрд╕ рдХрдорд╛рдиреЗ рдХреЗ рддрд░реАрдХреЗ: 1) рдореБрджреНрджрд╛ рд░рд┐рдкреЛрд░реНрдЯ рдХрд░рдиреЗ рдкрд░ 10 рдкреЙрдЗрдВрдЯреНрд╕, 2) рд░рд┐рдкреЛрд░реНрдЯ рд░рд┐рдЬреЙрд▓реНрд╡ рд╣реЛрдиреЗ рдкрд░ 25 рдкреЙрдЗрдВрдЯреНрд╕, 3) рдЕрдиреНрдп рдпреВрдЬрд░реНрд╕ рдХреА рд░рд┐рдкреЛрд░реНрдЯреНрд╕ рдХреЛ рд╡реЛрдЯ рдХрд░рдиреЗ рдкрд░ 2 рдкреЙрдЗрдВрдЯреНрд╕, 4) рдХрдореНрдпреВрдирд┐рдЯреА рдореЗрдВ рд╕рдХреНрд░рд┐рдп рднрд╛рдЧреАрджрд╛рд░реА рдкрд░ 5 рдкреЙрдЗрдВрдЯреНрд╕! ЁЯОп",
      suggestions: ["рдкреЙрдЗрдВрдЯреНрд╕ рдХрд╛ рдХреНрдпрд╛ рдЙрдкрдпреЛрдЧ рд╣реИ?", "рд▓реАрдбрд░рдмреЛрд░реНрдб рдХреНрдпрд╛ рд╣реИ?", "рдХреНрдпрд╛ рдкреЙрдЗрдВрдЯреНрд╕ рдПрдХреНрд╕рдкрд╛рдпрд░ рд╣реЛрддреЗ рд╣реИрдВ?"]
    },
    "рд╡рд┐рднрд┐рдиреНрди рд╢реНрд░реЗрдгрд┐рдпрд╛рдВ рдХреНрдпрд╛ рд╣реИрдВ": {
      content: "рд╣рдорд╛рд░реА рдореБрдЦреНрдп рд╢реНрд░реЗрдгрд┐рдпрд╛рдВ: 1) рд╕рдбрд╝рдХ рдФрд░ рдЗрдВрдлреНрд░рд╛рд╕реНрдЯреНрд░рдХреНрдЪрд░, 2) рд╕реНрд╡рдЪреНрдЫрддрд╛ рдФрд░ рдХрдЪрд░рд╛ рдкреНрд░рдмрдВрдзрди, 3) рдЬрд▓ рдЖрдкреВрд░реНрддрд┐ рдФрд░ рдирд╛рд▓рд┐рдпрд╛рдВ, 4) рдмрд┐рдЬрд▓реА рдФрд░ рд╕реНрдЯреНрд░реАрдЯ рд▓рд╛рдЗрдЯ, 5) рдкрд╛рд░реНрдХ рдФрд░ рд╣рд░рд┐рдд рд╕реНрдерд╛рди, 6) рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рд╕реБрд░рдХреНрд╖рд╛! ЁЯЧВя╕П",
      suggestions: ["рдХреМрди рд╕реА рд╢реНрд░реЗрдгреА рд╕рдмрд╕реЗ рдЬреНрдпрд╛рджрд╛ рдкреЙрдЗрдВрдЯреНрд╕ рджреЗрддреА рд╣реИ?", "рдЧрд▓рдд рд╢реНрд░реЗрдгреА рдЪреБрдирдиреЗ рдкрд░ рдХреНрдпрд╛ рд╣реЛрдЧрд╛?", "рдирдИ рд╢реНрд░реЗрдгреА рд╕реБрдЭрд╛рд╡ рдХреИрд╕реЗ рджреЗрдВ?"]
    }
  } : {
    "how to report an issue": {
      content: "To report an issue: 1) Click 'Report Issue' tab, 2) Fill basic information, 3) Select category and priority, 4) Add location and photos, 5) Review and submit. You'll earn points for every valid report! ЁЯПЖ",
      suggestions: ["What categories are available?", "How long does review take?", "Can I edit my report?"]
    },
    "what happens after reporting": {
      content: "After submission: 1) Your report gets a unique ID, 2) Government officials review it within 24-48 hours, 3) It's assigned to relevant departments, 4) You receive progress updates, 5) You earn points when resolved! тЬи",
      suggestions: ["How to track status?", "Who reviews my report?", "What if nothing happens?"]
    },
    "how to track my reports": {
      content: "To track your reports: 1) Go to 'My Reports' section, 2) View list of all submitted reports, 3) See current status of each report (Review, Progress, Resolved), 4) Check notifications for updates, 5) Claim points for resolved reports! ЁЯУК",
      suggestions: ["Can I edit my report?", "How long until resolution?", "What if my report gets rejected?"]
    },
    "how to earn points": {
      content: "Ways to earn points: 1) 10 points for reporting an issue, 2) 25 points when your report is resolved, 3) 2 points for voting on other reports, 4) 5 points for active community participation! ЁЯОп",
      suggestions: ["What are points used for?", "What is the leaderboard?", "Do points expire?"]
    },
    "what are the categories": {
      content: "Our main categories: 1) Roads & Infrastructure, 2) Sanitation & Waste Management, 3) Water Supply & Drains, 4) Electricity & Street Lights, 5) Parks & Green Spaces, 6) Public Safety! ЁЯЧВя╕П",
      suggestions: ["Which category gives the most points?", "What if I choose the wrong category?", "How to suggest a new category?"]
    }
  };

  const [messages, setMessages] = useState<Message[]>([
    {
      id: 1,
      type: 'bot',
      content: t.howCanIHelp || (language === 'hi' ? 'рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ?' : 'How can I help you?'),
      timestamp: new Date(),
      suggestions: quickQuestions.slice(0, 3)
    }
  ]);
  const [currentMessage, setCurrentMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);

  const getBotResponse = (userMessage: string): { content: string; suggestions?: string[] } => {
    const normalizedMessage = userMessage.toLowerCase().trim();
    
    // Remove question marks and other punctuation for better matching
    const cleanMessage = normalizedMessage.replace(/[?.,]/g, '');
    
    // Check for exact matches first
    for (const [key, response] of Object.entries(botResponses)) {
      const cleanKey = key.toLowerCase().replace(/[?.,]/g, '');
      if (cleanMessage === cleanKey) {
        return response;
      }
    }
    
    // Check for partial matches
    for (const [key, response] of Object.entries(botResponses)) {
      const cleanKey = key.toLowerCase().replace(/[?.,]/g, '');
      if (cleanMessage.includes(cleanKey) || cleanKey.includes(cleanMessage)) {
        return response;
      }
    }
    
    // Check for keyword matches
    const keywords = language === 'hi' 
      ? ['рд░рд┐рдкреЛрд░реНрдЯ', 'рдЯреНрд░реИрдХ', 'рдкреЙрдЗрдВрдЯ', 'рд╢реНрд░реЗрдгреА', 'рдорджрдж'] 
      : ['report', 'track', 'point', 'category', 'help'];
    
    for (const keyword of keywords) {
      if (cleanMessage.includes(keyword)) {
        // Return a relevant response based on the keyword
        if (keyword === 'report' || keyword === 'рд░рд┐рдкреЛрд░реНрдЯ') {
          return botResponses[language === 'hi' ? 'рдореБрджреНрджрд╛ рдХреИрд╕реЗ рд░рд┐рдкреЛрд░реНрдЯ рдХрд░реЗрдВ' : 'how to report an issue'];
        } else if (keyword === 'track' || keyword === 'рдЯреНрд░реИрдХ') {
          return botResponses[language === 'hi' ? 'рдЕрдкрдиреА рд░рд┐рдкреЛрд░реНрдЯ рдХреИрд╕реЗ рдЯреНрд░реИрдХ рдХрд░реЗрдВ' : 'how to track my reports'];
        } else if (keyword === 'point' || keyword === 'рдкреЙрдЗрдВрдЯ') {
          return botResponses[language === 'hi' ? 'рдкреЙрдЗрдВрдЯреНрд╕ рдХреИрд╕реЗ рдХрдорд╛рдПрдВ' : 'how to earn points'];
        } else if (keyword === 'category' || keyword === 'рд╢реНрд░реЗрдгреА') {
          return botResponses[language === 'hi' ? 'рд╡рд┐рднрд┐рдиреНрди рд╢реНрд░реЗрдгрд┐рдпрд╛рдВ рдХреНрдпрд╛ рд╣реИрдВ' : 'what are the categories'];
        }
      }
    }
    
    // Default response if no match found
    return {
      content: language === 'hi'
        ? "рдореИрдВ рдЖрдкрдХреА рдорджрдж рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдВ рд╣реВрдВ! рдпрд╣рд╛рдВ рдХреБрдЫ рд╕рд╛рдорд╛рдиреНрдп рдкреНрд░рд╢реНрди рд╣реИрдВ рдЬрд┐рдирдХрд╛ рдореИрдВ рдЬрд╡рд╛рдм рджреЗ рд╕рдХрддрд╛ рд╣реВрдВ, рдпрд╛ CivicEye рдХреЗ рдЙрдкрдпреЛрдЧ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдХреБрдЫ рднреА рдкреВрдЫрдиреЗ рдХреЗ рд▓рд┐рдП рд╕реНрд╡рддрдВрддреНрд░ рдорд╣рд╕реВрд╕ рдХрд░реЗрдВред ЁЯЩЛтАНтЩВя╕П"
        : "I'm here to help! Here are some common questions I can answer, or feel free to ask anything about using CivicEye. ЁЯЩЛтАНтЩВя╕П",
      suggestions: quickQuestions.slice(0, 4)
    };
  };

  const sendMessage = (messageContent?: string) => {
    const content = messageContent || currentMessage.trim();
    if (!content) return;

    const userMessage: Message = { 
      id: Date.now(), 
      type: 'user', 
      content, 
      timestamp: new Date() 
    };
    
    setMessages(prev => [...prev, userMessage]);
    setCurrentMessage('');
    setIsTyping(true);

    setTimeout(() => {
      const botResponse = getBotResponse(content);
      const botMessage: Message = {
        id: Date.now() + 1,
        type: 'bot',
        content: botResponse.content,
        timestamp: new Date(),
        suggestions: botResponse.suggestions
      };
      
      setMessages(prev => [...prev, botMessage]);
      setIsTyping(false);
    }, 1000 + Math.random() * 1000);
  };

  const handleQuickQuestion = (question: string) => {
    setCurrentMessage(''); // Clear input field
    sendMessage(question);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  return (
    <Card className="fixed bottom-16 right-4 sm:bottom-20 sm:right-6 w-[350px] sm:w-96 h-[500px] flex flex-col glass-card neon-glow-hover z-50 animate-in slide-in-from-bottom-4 duration-300">
      <CardHeader className="pb-3 relative">
        <div className="absolute inset-0 bg-gradient-to-r from-blue-500/10 to-purple-500/10 animate-pulse"></div>
        <div className="flex items-center justify-between relative z-10">
          <CardTitle className="text-white flex items-center">
            <div className="w-8 h-8 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center mr-2 neon-blue animate-pulse">
              <Bot className="h-4 w-4 text-white animate-bounce" />
            </div>
            <div>
              <span className="bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
                {t.chatBot || (language === 'hi' ? 'рдЪреИрдЯ рд╕рд╣рд╛рдпрдХ' : 'Chat Assistant')}
              </span>
              <div className="text-xs text-gray-400 font-normal">
                {language === 'hi' ? 'рдореБрдВрдмрдИ AI рд╕рд╣рд╛рдпрдХ' : 'Mumbai AI Assistant'}
              </div>
            </div>
          </CardTitle>
          <Button 
            variant="ghost" 
            size="sm" 
            onClick={onClose} 
            className="text-gray-400 hover:text-white hover:bg-white/10 h-8 w-8 p-0 neon-glow-hover"
          >
            <X className="h-4 w-4" />
          </Button>
        </div>
        <div className="flex items-center space-x-2 relative z-10 mt-2">
          <div className="w-2 h-2 rounded-full bg-green-400 animate-pulse neon-glow-hover"></div>
          <span className="text-sm text-gray-400">
            {language === 'hi' ? 'рдСрдирд▓рд╛рдЗрди рдФрд░ рдорджрдж рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░' : 'Online and ready to help'}
          </span>
          <Sparkles className="h-3 w-3 text-yellow-400 animate-pulse" />
        </div>
      </CardHeader>

      <CardContent className="p-0 flex flex-col flex-1">
        <ScrollArea className="flex-1 p-4 overflow-auto">
          <div className="flex flex-col space-y-4">
            {messages.map(msg => (
              <div key={msg.id} className={`flex ${msg.type === 'user' ? 'justify-end' : 'justify-start'}`}>
                <div className="max-w-[85%]">
                  <div className={`p-3 rounded-lg break-words whitespace-normal ${msg.type === 'user' ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white neon-blue hover:scale-105' : 'glass-card text-gray-100'}`}>
                    <p className="text-sm whitespace-normal break-words">{msg.content}</p>
                  </div>
                  {msg.suggestions && msg.suggestions.length > 0 && (
                    <div className="mt-2 flex flex-wrap gap-1">
                      {msg.suggestions.map((s, i) => (
                        <Button 
                          key={i} 
                          variant="outline" 
                          size="sm" 
                          onClick={() => handleQuickQuestion(s)}
                          className="text-xs glass-card border-white/20 text-gray-300 hover:glass-card-hover hover:text-white break-words whitespace-normal min-h-[32px] max-w-full flex items-center gap-1"
                        >
                          <HelpCircle className="h-3 w-3 flex-shrink-0" /> 
                          {s}
                        </Button>
                      ))}
                    </div>
                  )}
                  <div className="text-xs text-gray-500 mt-1 flex items-center gap-1">
                    {msg.type === 'user' ? <User className="h-3 w-3" /> : <Bot className="h-3 w-3" />}
                    {msg.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                  </div>
                </div>
              </div>
            ))}
            {isTyping && (
              <div className="flex justify-start">
                <div className="glass-card p-3 rounded-lg max-w-[85%] flex items-center gap-2">
                  <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce neon-blue"></div>
                  <div className="w-2 h-2 bg-purple-400 rounded-full animate-bounce neon-purple" style={{ animationDelay: '0.1s' }}></div>
                  <div className="w-2 h-2 bg-cyan-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  <span className="text-sm text-gray-400">
                    {language === 'hi' ? 'рд╕рд╣рд╛рдпрдХ рдЯрд╛рдЗрдк рдХрд░ рд░рд╣рд╛ рд╣реИ...' : 'Assistant is typing...'}
                  </span>
                </div>
              </div>
            )}
          </div>
        </ScrollArea>

        <div className="px-4 py-2 border-t border-white/10 flex flex-col gap-2 glass-card">
          <div className="flex flex-wrap gap-1">
            {quickQuestions.slice(0, 2).map((q, i) => (
              <Badge 
                key={i} 
                variant="secondary" 
                onClick={() => handleQuickQuestion(q)}
                className="cursor-pointer text-xs bg-blue-500/20 text-blue-300 border-blue-500/30 hover:bg-blue-500/30 neon-glow-hover break-words whitespace-normal max-w-full px-2 py-1 flex items-center gap-1"
              >
                <Zap className="h-3 w-3 animate-pulse flex-shrink-0" /> 
                {q}
              </Badge>
            ))}
          </div>
          <div className="flex space-x-2">
            <Input
              value={currentMessage}
              onChange={e => setCurrentMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder={t.typeMessage || (language === 'hi' ? 'рд╕рдВрджреЗрд╢ рдЯрд╛рдЗрдк рдХрд░реЗрдВ...' : 'Type a message...')}
              disabled={isTyping}
              className="glass-card border-white/20 text-white placeholder-gray-400 focus:border-blue-500 focus:neon-blue break-words flex-1"
            />
            <Button 
              onClick={() => sendMessage()} 
              disabled={!currentMessage.trim() || isTyping}
              className="bg-gradient-to-r from-blue-600 to-purple-600 text-white px-3 neon-glow-hover hover:scale-105"
            >
              <Send className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}